Paige Brinks
CS 342
guide 12
4/24/2017

Work through the following materials this week:

1.	Read specified sections of Java Persistence and explain the given concepts.

a.	Chapter 3, “What is Java persistence?”

	i.	Persistence in Java and how it relates to the impedance mismatch discussed in unit 8
		- Java persistence could be defined as storing anything to any level of persistence using the Java programming language.
		-	The Java Persistence API (JPA) is a Java specification for accessing, persisting, and managing data between Java objects / classes and a relational database. JPA was defined as part of the EJB 3.0 specification as a replacement for the EJB 2 CMP Entity Beans specification. JPA is now considered the standard industry approach for Object to Relational Mapping (ORM) in the Java Industry.
	ii.	POJOs
		-	JPA allows POJO (Plain Old Java Objects) to be easily persisted without requiring the classes to implement any interfaces or methods as the EJB 2 CMP specification required

	b.	Chapter 4, “Persistence Products, Which to Use?” — Name 2–3 of the major JPA implementations and indicate which one we are using in this class.
		- DataNucleus
		- EclipseLink (we are using this one)
		- TopLink
		
	c.	Chapter 5, “Mapping, Round Pegs into Square Holes” — Annotate this Java class for object-relational mapping using Java Annotations with the property access type.

		@Entity
		public class Solder {
			@Column(name="NAME")
			private String name;
			@Column(name="RANK")
			private String rank;
			@Id
			@Column(name="ID")
			private long serialNumber;
			
			@ManyToOne(fetch=FetchType.LAZY)
			@JoinColumn(name="COMMANDER_ID")
			private Solder commander;
			
			@ManToMany
			@Jointable(
				name="BATTLE"
				joinColumns=@JoinColumn(name="SOLDER_ID", referencedColumnName="ID"),
				inverseJoinColumns=@JoinColumn(name="BATTLE_ID", referencedColumnName="ID"))
			private List<Battle> battles;

			public String getName() { return name; }
			public void setName(String name) { this.name = name; }

			public String getRank() { return rank; }
			public void setRank(String rank) { this.rank = rank; }

			public String getSerialNumber() { return serialNumber; }
			public void setSerialNumber(String serialNumber) { this.serialNumber = serialNumber; }
		}
	In particular, add annotations for the following.

	-	Persistence Entity — Annotate the class as a persistence entity (Chapter 5 overview).
	-	OID — Annotate the object ID (Section 5.2).
	-	Basic fields — Annotate the non-ID fields (Section 5.6).
	-	Relationships — Add new fields/accessors/annotations that exemplify the following JPA relationships (Section 5.7 overview & Sections 5.7.2–5.7.4).
		-	A many-to-one relationship to a commander — The commander is another Solder object.
		-	A many-to-many relationship to a Battle class — You don’t need to add the Battle class.
	You don’t need to run this code, but be familiar with the concepts and the annotations that implemen them.

	d.	Chapter 6, “Runtime, Doing the Hokey Pokey (EntityManager)”

		i.	Entity Manager (Chapter 6 overview)
			- JPA provides a runtime API defined by the javax.persistence package. The main runtime class is the EntityManager class. The EntityManager provides API for creating queries, accessing transactions, and finding, persisting, merging and deleting objects. The JPA API can be used in any Java environment including JSE and JEE.

		ii.	Injection — We’ll use J2EE dependency injection to access to a container-managed EntityManager (Chapter 6 overview).
			- An EntityManager can be created through an EntityManagerFactory, or can be injected into an instance variable in an EJB SessionBean, or can be looked up in JNDI in a JEE server.

		iii.	Persistence operations — Name the four basic persistence operations (Section 6.2).
			- persist, merge, remove, find


2.	Review Intellij’s support to database connections and JPA.

	a.	Create a new J2EE application as you created the JDK/J2EE application in the previous lab, activating the following “Java Enterprise” libraries/frameworks.

		-	Web Application 3.1
		-	J2EE Persistence 2.1; Provider: EclipseLink; setting up the library later
		-	RESTful Web Service; using the library from the GlassFish installation
	StoreStore it in your repo under cs342/12postrelational/Lab12.

	b.	Databases and SQL — Note that Oracle must be running with the CPDB database loaded for this data connection to work.

		i.	Open the Intellij database tool pane by choosing View→Tool Windows→Database.
		ii. Create a new data source for your existing Oracle CPDB database, name it cpdb&localhost and make sure that “Test Connection” works properly. You may need to download a required library (to make IDEA happy; GlassFish already has all the required libraries).
		iii. Fetch the records in the Person table by double-clicking on the table name in the Database pane.
	c.	Java Persistence API (JPA)

		i.	Open the Intellij “Persistence” tool pane by choosing View→Tool Windows→Persistence.
Store a (low-resolution) screen dump image of your new app in the IDE. It should look something like the one shown to the right (but be lower-resolution). You’ll use this app as the basis for lab 12.