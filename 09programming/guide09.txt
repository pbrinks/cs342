Paige Brinks
CS 342
guide 09
4/04/2017

1.	Chapter 17

	a.	B+ Trees — Focus on the Section 17.3 (skipping the material on algorithms).
		i.	Compare and contrast B-trees and B+-trees.
			- A B-tree starts with a single root node (which is also a leaf node) at level 0 (zero). Once the root node is full with p − 1 search key values and we attempt to insert another entry in the tree, the root node splits into two nodes at level 1. Only the middle value is kept in the root node, and the rest of the values are split evenly between the other two nodes. When a nonroot node is full and a new entry is inserted into it, that node is split into two nodes at the same level, and the middle entry is moved to the parent node along with two pointers to the new split nodes. If the parent node is full, it is also split. Splitting can propagate all the way to the root node, creating a new level if the root is split. If deletion of a value causes a node to be less than half full, it is combined with its neighboring nodes, and this can also propagate all the way to the root. Hence, deletion can reduce the number of tree levels. It has been shown by analysis and simulation that, after numerous random insertions and deletions on a B-tree, the nodes are approximately 69% full when the number of values in the tree stabilizes. If this happens, node splitting and combining will occur only rarely, so insertion and deletion become quite efficient. If the number of values grows, the tree will expand without a problem—although splitting of nodes may occur, so some insertions will take more time. Each B-tree node can have at most p tree pointers, p − 1 data pointers, and p − 1 search key field values.
			- In a B-tree, every value of the search field appears once at some level in the tree, along with a data pointer. In a B+-tree, data pointers are stored only at the leaf nodes of the tree; hence, the structure of leaf nodes differs from the structure of internal nodes. The leaf nodes have an entry for every value of the search field, along with a data pointer to the record (or to the block that contains this record) if the search field is a key field. For a nonkey search field, the pointer points to a block containing pointers to the data file records, creating an extra level of indirection.

		ii.	Explain what it means for such a tree to be balanced.
			- all leaf nodes are at the same level

		iii. Compare and contrast tree and data pointers.
			- tree pointers are in internal nodes, and point to blocks that are tree nodes
			- data pointers are in leaf nodes and point to data file records or blocks

	b.	Explain the nature of multiple-attribute indexes (see the introduction to Section 17.4).
		- if we want to query for nonkey attributes, we can give one of them an index, which will make querying for them faster. However, if the number of records that meet the indexed condition are large, but only a few records satisfy a combined condition, then this is still an inefficient technique.

	c. Explain the nature of hash and bitmap indexes (see Sections 17.5.1–2).
		- hash index - use hashing on a search key other than the one used for primary data file organization. Index entries can be organized as a dynamically expandable has file; searching for an entry uses the has search algorithm on K. Once it is found a pointer is used to locate the corresponding record in the data file.
		- bitmap indexes - used for relations that contain a large number of rows. Creates an index for one or more columns, and each value or value range in those columns is indexed. Typically a bitmap index is created for those columns that contain a fairly small number of unique values. To  build a bitmap index on a set of records in a relation, the records must be numbered from 0 to n with an id that can be mapped to a physical address made of a block number and a record offset within the block. A bitmap index is built on one particular value of a particular field (the column in a relation) and is just an array of bits. Thus, for a given field, there is one separate bitmap index (or a vector) maintained corresponding to each unique value in the database.

	d.	Physical Database Design — Focus on the Section 17.7.
		i.	Explain the concept of physical database design (PDD).
		- PDD is an acitivity where the goal is not only to create the appropriate structuring of data in storage, but also to do so in a way that guarentees good performance. 

		ii.	Compare and contrast the uses for B-tree, hash and bitmap indexes in PDD.
		- b-tree indexes are best for high cardinality columns
		- Hash indexes work well with equality conditions, particularly during joins to find a matching record(s), but they do not support range queries.
		- bitmap index is advisable for systems in which data is not frequently updated by many concurrent systems. Good for low cardinality problems.
		
		iii.	Explain whether denormalization should be considered a form of PDD.
		- yes it should. Denormalization is the structuring of data in storage that guarentees good performance. Denormalization can affect that a lot - if the table is data is needed for a lot of read commands, then denormalization would give it better performance. However, if the relation is going to be more write heavy, then denormalization would not be a good way to go. 

2.	Chapter 18

	a.	Explain the concept of query optimization (see the introduction to the chapter).
	- The process of choosing a suitable execution strategy - how the internal representation of the query is created, after scanning, parsing and validating the query.
3.	Oracle’s EXPLAIN PLAN

	a.	Load the small version of the Internet Movie DB defined in the repo (cs342/databases/imdb), configure the auto-trace facility in SQL*Plus (SET SERVEROUTPUT ON; & SET AUTOTRACE ON;) and generate an execuation plan for some simple query. What is the execution plan operation used and what does that operation do?
	- oracles EXPLAIN PLAN statement displays execution plans chosen by the optimizer for SELECT, UPDATE, INSERT, and DELETE statements. It is the sequence of operations that the database performs to run the statement.
	
	explain plan for
		select * from Movie;
		
	explain plan
		set statement_id = 'st1'
		for select name from Movie;
		
	select plan_table_output from table(dbms_xplan.display());
	
	- used table access full - reads the entire table as stored on the disk. A full table scan must inspect all table rows so it can also consume a considerable amount of CPU time.
	

	b.	Explain at least the following operations (see Oracle Execution Plan Operations).

			TABLE ACCESS FULL
			- reads the entire table as stored on the disk. A full table scan must inspect all table rows so it can also consume a considerable amount of CPU time.
			
			TABLE ACCESS BY INDEX
			- Retrieves a row from the table using the ROWID retrieved from the preceding index lookup.
			- An index is a distinct structure in the database that is built using the create index statement. It requires its own disk space and holds a copy of the indexed table data. That means that an index is pure redundancy. Creating an index does not change the table data; it just creates a new data structure that refers to the table.
			
			NESTED LOOPS
			- join algorithm. It works like using two nested queries: the outer or driving query to fetch the results from one table and a second query for each row from the driving query to fetch the corresponding data from the other table.
			
			HASH JOIN
			- Loads the candidate records from one side of the join into a hash table that is then probed for each row from the other side of the join. 
			
			INDEX UNIQUE SCAN
			- Performs the B-tree traversal only. The database uses this operation if a unique constraint ensures that the search criteria will match no more than one entry. 
			
			
			
For Oracle’s reference documentation, see Database Performance Tuning Guide, particularly the “Using EXPLAIN PLAN” section. Note that the text also explains these operations conceptually in Chapter 18.