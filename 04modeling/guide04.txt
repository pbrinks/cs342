Paige Brinks
CS 342
Guide 04
02/19/2017

2.	Read Chapter 14 (focus primarily on Sections 14.1-2, 14.3.1-3, 14.5-6) — It’s ok to submit rather fuzzy or even empty answers on the material specifically marked for Wednesday’s discussion.
	a.	Explain the four informal guidelines discussed in Section 14.1.
		1) Making sure that the semantics of the attributes is clear in the schema. 
			- The semantics of a relation refers to its meaning resulting from the interpretation of attribute values in a tuple. In general, the easier it is to explain what a relation exactly is and stands for, the better the relationship schema design will be.
			- Design a relation schema so that it is easy to explain its meaning. Do not combine attributes from multiple entity types and relationship types into a single relation. Intuitively, if a relation schema corresponds to one entity type or one relationship type, it is straightforward to explain its meaning. Otherwise, if the relationship corresponds to a mixture of multiple entities and relationships, semantic ambiguities will result and the relation cannot be easily explained.
		2) Reducing the redundant information in tuples.
			- A goal of schema design is to minimize the storage space used by the base relations - aka we don't want to repeat information.
			- Design the base relation schemas so that no insertions, deletion, or modifiation anomalies are present in the relations. If any anomalies are present, note them clearly and make sure that the programs that update the database will operate correctly.
		3) Reducing the NULL values in tuples.
			- In some schemas we may group many attributes together into a "fat" relation. If many of the attributes do not apply to all the tuples in the relation, we may end up with many NULLs in those tuples. This can waste psace at the storage level and may also lead to problems with understanding the meaning of the attributes and with specifying JOIN operations at the logical level. Another problem with NULLs is how to account for them when aggregate operations such as COUNT or SUM are applied. SELECT and JOIN operations involve comparisons; if NULL values are present, the results may become unpredictable. Also, NULLs can have multiple interpretations.
			- As far as possible, avoid placing attributes in a base relation whose valeus may be NULL. If NULLs are unavoidable, make sure that they apply in exceptional cases only and do not apply to a majority of tuples in the relation. 
		4) Disallowing the possibility of generating spurious tuples.
			- Design relation schemas so that they can be joined with equality conditions on attributes that are appropriately related (primary key, foreign key) pairs in a way that guarentees that no spurious tuples are generated. Avoid relations that contain matching attributes that are not (foreign key, primary key) combinations because joining on such attributes may produce spurious tuples. 
			
	b.	Explain the terms functional dependency (for Monday, see Section 14.2) and multi-valued dependency (for Wednesday, see Section 14.6) by giving an example of each and showing how it satisfies the term’s formal definition.
		- Functional dependency: A constraint between two sets of attributes from the database. - A functional dependency between two sets of attributes X and Y, denoted X -> Y, that are subsets of R specifies a constraint on the possible tuples that can form a relation state r of R. The constraint is that, for any two tuples t1 and t2 in r have t1[X]=t2[X], they must also have t1[Y]=t2[Y].
			- ex: {State, Driver_license_number} -> Ssn
		- Multi-valued dependency:

	c.	Review the formal definitions of these terms: superkey; key (see Section 14.3.3).
		- A superkey of a relation schema R is a set S of attributes with the property that no two tuples t1 and t2 in any legal relation state r of R will have t1[S]=t2[S]
		- A key K is a superkey with the additional property tht removal of any attribute from K will cause K not to be a superkey anymore.
		- Difference between the two is that a key has to be minimal.

	d.	Explain BCNF (for Monday, see Section 14.5) and 4NF (for Wednesday, see Section 14.6) by giving an example relation and proving whether its schema conforms (or fails to conform) to the definitions of each normal form.
		- Boyce-Codd Normal Form (BCNF): A relation schema R is in BCNF if whenever a nontrivial functional dependency X -> A holds in R, then X is a superkey of R.
			- Differs from 3NF because the clause in 3NF because does not allows functional dependencies to have the RHS as a prime attribute. IS therefore a stronger normal form than 3NF. 1NF and 2NF are seen as intermediate stepping stones to achieve 3NF or BCNF.
		
		- 4NF:

	e.	Explain when one would one want to normalize a relational schema and when one might want to de-normalize one.
		- In a normalized relational schema updates and inserts are very fast becuase the data is located at a single place - there are no duplicates, however, this can make selects slow, because the user is more likely to need to join tables together. Therefore, normalized databases are good for when applications require more writing than reading.
		- A denormalized database has a lot of duplicates, this makes selects fast because the user is going to require less joins. However, inserts and updates are therefore slow. Denormalized databases are good for when applications require more reading than writing.

Review Section 15.1.1 well enough to be able to define Armstrong’s axioms (IR1–3) and closures.
	- Armstrong's axioms
	IR1 (reflexive rule): If X is contained in Y, then X -> Y
	IR2 (augmentation rule): {X -> Y} |= XZ -> YZ
	IR3 (transitive rule): {X -> Y, Y -> Z} |= X -> Z
	
	- Closures: If F is the set of functional dependencies that are specified on relation schema R, then the set of all dependencies that include F as well as all dependencies that can be inferred from F is the closure of F.