Paige Brinks
CS 342
guide 13
4/29/2017


1.	Read Pramod Sadalage’s NoSQL Databases: An Overview (circa 2012) and explain:

	a.	the key motivations for considering non-relational database systems.
		-	Application developers have been frustrated with the impedance mismatch between the relational data structures and the in-memory data structures of the application. Using NoSQL databases allows developers to develop without having to convert in-memory structures to relational structures.
		-	The rise of the web as a platform also created a vital factor change in data storage as the need to support large volumes of data by running on clusters. 
		-	Relational databases were not designed to run efficiently on clusters.
	
	b.	aggregate data models
		-	An aggregate is a collection of data that we interact with as a unit. These units of data or aggregates form the boundaries for ACID operations with the database, Key-value, Document, and Column-family databases can all be seen as forms of aggregate-oriented database.
		-	Aggregates make it easier for the database to manage data storage over clusters, since the unit of data now could reside on any machine and when retrieved from the database gets all the related data along with it. 

	c.	polyglot persistence.

	d.	the relevance of the CAP theorem.
		-	 in any distributed system we can choose only two of consistency, availability or partition tolerance. 
		-	The CAP theorem states that if you get a network partition, you have to trade off availability of data versus consistency of data. Durability can also be traded off against latency, particularly if you want to survive failures with replicated data.

	e.	the types of NoSQL databases.
		1) Key-Value Databases: Key-value stores are the simplest NoSQL data stores to use from an API perspective. The client can either get the value for the key, put a value for a key, or delete a key from the data store. The value is a blob that the data store just stores, without caring or knowing what's inside; it's the responsibility of the application to understand what was stored. Since key-value stores always use primary-key access, they generally have great performance and can be easily scaled.
		
		2) Document Database: Documents are the main concept in document databases. The database stores and retrieves documents, which can be XML, JSON, BSON, and so on. These documents are self-describing, hierarchical tree data structures which can consist of maps, collections, and scalar values. The documents stored are similar to each other but do not have to be exactly the same. Document databases store documents in the value part of the key-value store; think about document databases as key-value stores where the value is examinable. Document databases such as MongoDB provide a rich query language and constructs such as database, indexes etc allowing for easier transition from relational databases.

		3) Column Family Stores: Column-family databases store data in column families as rows that have many columns associated with a row key. Column families are groups of related data that is often accessed together.
		-	Each column family can be compared to a container of rows in an RDBMS table where the key identifies the row and the row consists of multiple columns. The difference is that various rows do not have to have the same columns, and columns can be added to any row at any time without having to add it to other rows.
		-	When a column consists of a map of columns, then we have a super column. A super column consists of a name and a value which is a map of columns. Think of a super column as a container of columns.

		4) Graph Database: Graph databases allow you to store entities and relationships between these entities. Entities are also known as nodes, which have properties. Think of a node as an instance of an object in the application. Relations are known as edges that can have properties. Edges have directional significance; nodes are organized by relationships which allow you to find interesting patterns between the nodes. The organization of the graph lets the data to be stored once and then interpreted in different ways based on relationships.
		-	Usually, when we store a graph-like structure in RDBMS, it's for a single type of relationship ("who is my manager" is a common example). Adding another relationship to the mix usually means a lot of schema changes and data movement, which is not the case when we are using graph databases. Similarly, in relational databases we model the graph beforehand based on the Traversal we want; if the Traversal changes, the data will have to change.
		-	In graph databases, traversing the joins or relationships is very fast. The relationship between nodes is not calculated at query time but is actually persisted as a relationship. Traversing persisted relationships is faster than calculating them for every query.
		-	Nodes can have different types of relationships between them, allowing you to both represent relationships between the domain entities and to have secondary relationships for things like category, path, time-trees, quad-trees for spatial indexing, or linked lists for sorted access. Since there is no limit to the number and kind of relationships a node can have, they all can be represented in the same graph database.
		-	Since most of the power from the graph databases comes from the relationships and their properties, a lot of thought and design work is needed to model the relationships in the domain that we are trying to work with. Adding new relationship types is easy; changing existing nodes and their relationships is similar to data migration, because these changes will have to be done on each node and each relationship in the existing data.

	f.	when (and when not) to use NoSQL database systems.
		-	Key-value databases are generally useful for storing session information, user profiles, preferences, shopping cart data. We would avoid using Key-value databases when we need to query by data, have relationships between the data being stored or we need to operate on multiple keys at the same time.
		-	Document databases are generally useful for content management systems, blogging platforms, web analytics, real-time analytics, ecommerce-applications. We would avoid using document databases for systems that need complex transactions spanning multiple operations or queries against varying aggregate structures.
		-	Column family databases are generally useful for content management systems, blogging platforms, maintaining counters, expiring usage, heavy write volume such as log aggregation. We would avoid using column family databases for systems that are in early development, changing query patterns.
		-	Graph databases are very well suited to problem spaces where we have connected data, such as social networks, spatial data, routing information for goods and money, recommendation engines

An alternate source of this basic information is Martin Fowler’s Introduction to NoSQL video.

2.	Use “Getting Started with the Key/Value API”, Chapters 3–5, from the Oracle NoSQL Database documentation as a reference. Be sure to know how to:

	a.	Compare and contrast Major and minor key components.
		-	Major key is like a primary key, minor key are all other fields

	b.	Use the appropriate commands to write and retrieve records.
		-	write to the store:
			1)	Construct a key, making sure to specify all of the key's major and minor path components. For information on major and minor path components, see Record Design Considerations.
			2)	Construct a value. This is the actual data that you want to put into the store.
			3)	Use one of the KVStore class's put methods to put the record to the store.
			
			commands: kvstore.put(), KVStore.putIfAbsent(), KVStore.putIfPresent(), KVStore.putIfVersion()
			
		`-	Retrieve a record:
			-	To retrieve a record from the store, use the KVStore.get() method. This method returns a ValueVersion object. Use ValueVersion.getValue() to return the Value object associated with the key.

Be sure that you can compare and contrast relational data representations with key-value representations. Note that we will not use these higher-level features: the NoSQL Table API (We’ll focus on the lower-level key/value API); the Avro value schema mechanism (We’ll restrict ourselves to simple string values).

3.	This practical article by Re Lai, Enterprise Application Development Using Oracle NoSQL Database, is also helpful. It includes some material that we don't care about (i.e., NetBeans, UML, Avro value-handling) but the following sections are useful for the homework. Skim them now and be prepared to reference them later as needed.

	a.	“Represent Key-Value Pairs” — Designing keys
	b.	“CRUD” — Implementing the standard persistent data operations
	c.	“Composite Keys” — Designing multi-element keys
	d.	“Model Entities” — Modeling relational records in a KV store
	e.	“Model Secondary Indexes” — Storing and retrieving sorted data
	f.	“Model Multi-values and Relationships” — Modeling foreign key relationships