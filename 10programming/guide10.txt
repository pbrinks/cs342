Paige Brinks
CS 342
Guide 10
4/09/2017

1.	Sections 20.1-20.4.1 & 20.6 — Explain the following.
	a.	interleaving vs. parallelism
		- interleaving: multiprogramming operating systems execute some commands from one process execute some commands from one processm then suspend htat process and execute some commands from the next process, and so on. A process is resumed at the point where it was suspended whenever it gets its turn to use the CPU again. Hence, concurrent execution of processes is actually interleaved. This keeps the CPU busy when a process is waiting on an I/O operation. Thos also prevents a longprocess from delaying other processes.
		- parallelism: Possible if the computer system has multiple hardware processors (CPUs). Multiple commands run at the same time.
		
	b.	the lost update and dirty read problems
		- Lost update: occurs when two transactions that access to the same database items have their operations interleaved in a way that makes the value of some database items incorrect. (write-write conflict)
		- Dirty read: Occurs when one transaction updates a database item adn then the transaction fails for some reason. Meanwhile, the updated item is accessed (read) by another transaction before it is changes back to its original value. 

	c.	transactions, including commits and rollbacks
		- A transaction is an executing program that forms a logical unit of databse processing. Includes one or more of the following operations: insert, delete, update, or retrieval ops. 
		- commit: a transaction is completed successfully and its effect is recorded permanently in the database. 
		- rollback: when a transaction is cancelled and values get changed back to their original values before the transaction took place.

	d.	the ACID properties = desirable properties of transactions; should be enforced by the concurrency control and recovery methods of the DBMS:
		- Atomicity: a transaction is an atomic unit of processing: it should either be performed in its entirety or not performed at all.
		- Consistency preservation: If a transaction is completely executed from beginning to end without interference from other transactions, it should take the database from one consistent state to another.
		- Isolation: A transaction should appear as though it is being executed in isolation from other transactions, even though many transactions are executing concurrently. That is, the execution of a transaction should not be interfered with by any other transactions executing concurrently.
		- Durability or Permanency: The changes applied to the database by a committed transaction must persist the database. These changes must not be lost because of any failure.

	e.	schedule
		- An ordering of the operations of the transactions. Is a total ordering; for any two operations in the schedule, one must occur before the other.

2.	Chapter 21 introduction and Section 21.1 — Explain the following.

	a.	lock
		- Prevents multiple transactions from accessing the items concurrently. A lock is a variable associated with a data item that describes the status of the item with respect to possible operations that can be applied to it. Locks are used as a means of synchronizing the access by concurrent transactions to the databse items. 

	b.	two-phase locking
		- All locking operations (read_lock, write_lock) must precede the first unlock operation in the transaction.

3.	Review Oracle’s Overview of Transaction Processing in PL/SQL (only; you can skip the other sections on this page) — Compare and contrast the following.

	a.	SAVEPOINT, COMMIT vs ROLLBACK [TO]
		- SAVEPOINT: Names and marks the current point in the processing of a transaction. Lets you roll back part of a transaction instead of the whole transaction.
		- COMMIT: Ends the current transaction, making any changes made during that transaction permanent, and visible to others.
		- ROLLBACK: Ends the current transaction and undoes any changes made during that transaction. If you make a mistake, such as deleting the wrong row from a table, a rollback restores the original data. If you cannot finish a transaction because an exception is raised or a sql statement failes, a rollback lets you take corrective action and perhaps start over.

	b.	LOCK TABLE vs. FOR UPDATE
		- LOCK TABLE: Can explicitly lock entire tables.
		- FOR UPDATE: Can explicitly lock specific rows of a table for make sure they do not change after you have read them. That way, you can check which or how many rows will be affected by an UPDATE or DELETE statement before issuing the statement, and no other application can change the rows in the meantime.